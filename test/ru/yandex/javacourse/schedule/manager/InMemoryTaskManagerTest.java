package ru.yandex.javacourse.schedule.manager;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.yandex.javacourse.schedule.tasks.Epic;
import ru.yandex.javacourse.schedule.tasks.Subtask;
import ru.yandex.javacourse.schedule.tasks.Task;
import ru.yandex.javacourse.schedule.tasks.TaskStatus;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class InMemoryTaskManagerTest {

    TaskManager manager;

    @BeforeEach
    public void initManager() {
        manager = Managers.getDefault();
    }

    @Test
    public void testAddTask() {
        Task task = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        assertEquals(1, manager.getTasks().size(), "task should be added");
        Task addedTask = manager.getTasks().get(0);
        assertEquals(task, addedTask, "added task id should be set");
        Task byIdTask = manager.getTask(task.getId());
        assertEquals(task, byIdTask, "added task id should be found");
    }


    @Test
    public void testAddTaskAutogeneratedId() {
        Task task0 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task task1 = new Task("Test 2", "Testing task 2", TaskStatus.NEW);
        manager.addNewTask(task0);
        manager.addNewTask(task1);
        assertEquals(2, manager.getTasks().size(), "lost a task with predefined id");
        assertEquals(1, task0.getId(), "autogenerated id should be 1");
        assertEquals(2, task1.getId(), "autogenerated id should be 2");
    }

    @Test
    public void checkTaskNotChangedAfterAddTask() {
        String name = "Test 1";
        String description = "Testing task 1";
        TaskStatus status = TaskStatus.NEW;
        Task task1before = new Task(name, description, status);
        manager.addNewTask(task1before);
        Task task1after = manager.getTask(task1before.getId());
        assertEquals(task1after.getId(), task1before.getId());
        assertEquals(task1after.getDescription(), description);
        assertEquals(task1after.getStatus(), status);
        assertEquals(task1after.getName(), name);
    }

    @Test
    public void testAddAllTasks() {
        Task task0 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task task1 = new Task("Test 2", "Testing task 2", TaskStatus.NEW);
        Epic epic1 = new Epic("Epic 1", "Testing epic 1");
        manager.addNewTask(task0);
        manager.addNewTask(task1);
        manager.addNewEpic(epic1);
        Subtask subtask1 = new Subtask("Test 1", "Testing task 1", TaskStatus.NEW, epic1.getId());
        manager.addNewSubtask(subtask1);
        assertEquals(1, manager.getEpics().size(), "All epics should be added");
        assertEquals(1, manager.getSubtasks().size(), "All subtasks should be added");
        assertEquals(2, manager.getTasks().size(), "All tasks should be added");
    }

    @Test
    public void testUpdateTask() {
        String name = "Test 1";
        String changedName = "Test 2";
        String description = "Testing task 1";
        TaskStatus status = TaskStatus.NEW;
        Task task = new Task(name, description, status);
        manager.addNewTask(task);
        task.setName(changedName);
        manager.updateTask(task);
        assertEquals(task.getName(), changedName);
        assertEquals(task.getDescription(), description);
    }

    @Test
    public void testUpdateEpic() {
        String name = "Test 1";
        String changedName = "Test 2";
        String description = "Testing epic 1";
        Epic epic = new Epic(name, description);
        manager.addNewEpic(epic);
        epic.setName(changedName);
        manager.updateEpic(epic);
        assertEquals(epic.getName(), changedName);
        assertEquals(epic.getDescription(), description);
    }

    @Test
    public void testUpdateSubtask() {
        String name = "Test 1";
        String changedName = "Test 2";
        String description = "Testing epic 1";
        Epic epic = new Epic(name, description);
        manager.addNewEpic(epic);
        Subtask subtask = new Subtask(name, description, TaskStatus.NEW, epic.getId());
        manager.addNewSubtask(subtask);
        subtask.setName(changedName);
        manager.updateSubtask(subtask);
        assertEquals(subtask.getName(), changedName);
        assertEquals(subtask.getDescription(), description);
    }

    @Test
    public void testDeleteEpics() {
        Epic epic1 = new Epic("Epic 1", "Testing epic 1");
        Epic epic2 = new Epic("Epic 2", "Testing epic 2");
        manager.addNewTask(new Task("Test 1", "Testing task 1", TaskStatus.NEW));
        manager.addNewTask(new Task("Test 2", "Testing task 2", TaskStatus.NEW));
        manager.addNewEpic(epic1);
        manager.addNewEpic(epic2);
        manager.deleteEpic(epic1.getId());
        Subtask subtask1 = new Subtask("Test 1", "Testing task 1", TaskStatus.NEW, epic1.getId());
        Subtask subtask2 = new Subtask("Test 2", "Testing task 2", TaskStatus.NEW, epic2.getId());
        manager.addNewSubtask(subtask1);
        manager.addNewSubtask(subtask2);
        assertEquals(1, manager.getEpics().size(), "One epic should be removed");
        assertEquals(1, manager.getSubtasks().size(), "One subtask should be removed");
        assertEquals(2, manager.getTasks().size(), "Tasks should not be removed");
        manager.addNewEpic(new Epic("Epic 2", "Testing epic 2"));
        manager.deleteEpics();
        assertEquals(0, manager.getEpics().size(), "All epic should be removed");
        assertEquals(0, manager.getSubtasks().size(), "All subtask should be removed");
        assertEquals(2, manager.getTasks().size(), "Tasks should not be removed");
    }


    @Test
    public void testDeleteTasks() {
        Task task1 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task task2 = new Task("Test 2", "Testing task 2", TaskStatus.NEW);
        Epic epic1 = new Epic("Epic 1", "Testing epic 1");
        Epic epic2 = new Epic("Epic 2", "Testing epic 2");
        manager.addNewTask(task1);
        manager.addNewTask(task2);
        manager.addNewEpic(epic1);
        manager.addNewEpic(epic2);
        Subtask subtask1 = new Subtask("Test 1", "Testing task 1", TaskStatus.NEW, epic1.getId());
        Subtask subtask2 = new Subtask("Test 2", "Testing task 2", TaskStatus.NEW, epic2.getId());
        manager.addNewSubtask(subtask1);
        manager.addNewSubtask(subtask2);
        manager.deleteTask(task1.getId());
        assertEquals(1, manager.getTasks().size(), "One task should be removed");
        assertEquals(2, manager.getEpics().size(), "Epics should not be removed");
        assertEquals(2, manager.getSubtasks().size(), "Subtasks should not be removed");

        manager.addNewTask(new Task("Test 1", "Testing task 1", TaskStatus.NEW));
        manager.deleteTasks();
        assertEquals(0, manager.getTasks().size(), "All task should be removed");
        assertEquals(2, manager.getEpics().size(), "Epics should not be removed");
        assertEquals(2, manager.getSubtasks().size(), "Subtasks should not be removed");
    }

    @Test
    public void testDeleteSubtasks() {
        Task task1 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task task2 = new Task("Test 2", "Testing task 2", TaskStatus.NEW);
        Epic epic1 = new Epic("Epic 1", "Testing epic 1");
        Epic epic2 = new Epic("Epic 2", "Testing epic 2");
        manager.addNewTask(task1);
        manager.addNewTask(task2);
        manager.addNewEpic(epic1);
        manager.addNewEpic(epic2);
        Subtask subtask1 = new Subtask("Test 1", "Testing task 1", TaskStatus.NEW, epic1.getId());
        Subtask subtask2 = new Subtask("Test 2", "Testing task 2", TaskStatus.NEW, epic2.getId());
        manager.addNewSubtask(subtask1);
        manager.addNewSubtask(subtask2);
        manager.deleteSubtask(subtask1.getId());
        assertEquals(1, manager.getSubtasks().size(), "One subtask should be removed");
        assertEquals(2, manager.getTasks().size(), "Tasks should be removed");
        assertEquals(2, manager.getEpics().size(), "Epics should not be removed");

        manager.addNewSubtask(new Subtask("Test 1", "Testing task 1", TaskStatus.NEW, epic1.getId()));
        manager.deleteSubtasks();
        assertEquals(0, manager.getSubtasks().size(), "All subtask should be removed");
        assertEquals(2, manager.getEpics().size(), "Epics should not be removed");
        assertEquals(2, manager.getTasks().size(), "Tasks should not be removed");
    }
}
